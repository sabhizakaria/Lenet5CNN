-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
-- Version: 2019.2
-- Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity conv1_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    input_r_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    input_r_ce0 : OUT STD_LOGIC;
    input_r_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    kernel_ce0 : OUT STD_LOGIC;
    kernel_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_r_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_r_ce0 : OUT STD_LOGIC;
    output_r_we0 : OUT STD_LOGIC;
    output_r_d0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of conv1_1 is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "conv1_1,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.050000,HLS_SYN_LAT=351465,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=245,HLS_SYN_LUT=245,HLS_VERSION=2019_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv5_0 : STD_LOGIC_VECTOR (4 downto 0) := "00000";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv5_1C : STD_LOGIC_VECTOR (4 downto 0) := "11100";
    constant ap_const_lv5_1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_const_lv3_5 : STD_LOGIC_VECTOR (2 downto 0) := "101";
    constant ap_const_lv31_0 : STD_LOGIC_VECTOR (30 downto 0) := "0000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal nb_filtre_fu_180_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal nb_filtre_reg_443 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal add_ln71_2_fu_206_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln71_2_reg_448 : STD_LOGIC_VECTOR (5 downto 0);
    signal icmp_ln64_fu_174_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal sext_ln75_fu_230_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal sext_ln75_reg_453 : STD_LOGIC_VECTOR (9 downto 0);
    signal i_fu_240_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal i_reg_461 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal sub_ln75_1_fu_279_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal sub_ln75_1_reg_466 : STD_LOGIC_VECTOR (12 downto 0);
    signal icmp_ln65_fu_234_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_fu_291_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal j_reg_474 : STD_LOGIC_VECTOR (4 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal k_fu_307_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal k_reg_482 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal add_ln71_fu_313_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln71_reg_487 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln68_fu_301_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal add_ln71_4_fu_340_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_4_reg_492 : STD_LOGIC_VECTOR (7 downto 0);
    signal l_fu_393_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal l_reg_500 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal icmp_ln69_fu_387_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal input_load_reg_515 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal kernel_load_reg_520 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln71_fu_431_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal mul_ln71_reg_525 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal res_fu_435_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal nb_filtre_0_reg_93 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_0_reg_104 : STD_LOGIC_VECTOR (4 downto 0);
    signal icmp_ln66_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_0_reg_116 : STD_LOGIC_VECTOR (4 downto 0);
    signal k_0_reg_128 : STD_LOGIC_VECTOR (2 downto 0);
    signal x_assign_reg_139 : STD_LOGIC_VECTOR (31 downto 0);
    signal l_0_reg_151 : STD_LOGIC_VECTOR (2 downto 0);
    signal res_4_reg_162 : STD_LOGIC_VECTOR (31 downto 0);
    signal zext_ln75_3_fu_378_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_3_fu_412_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal zext_ln71_7_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_190_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln71_fu_186_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal zext_ln71_1_fu_198_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal tmp_1_fu_212_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln75_fu_220_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln71_2_fu_202_p1 : STD_LOGIC_VECTOR (8 downto 0);
    signal sub_ln75_fu_224_p2 : STD_LOGIC_VECTOR (8 downto 0);
    signal zext_ln75_1_fu_246_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal add_ln75_fu_250_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal trunc_ln75_fu_255_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_2_fu_267_p3 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl3_cast_fu_259_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal sext_ln75_1_fu_275_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln68_fu_297_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal zext_ln71_4_fu_319_p1 : STD_LOGIC_VECTOR (5 downto 0);
    signal add_ln71_3_fu_323_p2 : STD_LOGIC_VECTOR (5 downto 0);
    signal p_shl5_cast_fu_332_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal zext_ln71_5_fu_328_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal icmp_ln13_fu_350_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal trunc_ln68_fu_346_p1 : STD_LOGIC_VECTOR (30 downto 0);
    signal return_value_fu_356_p3 : STD_LOGIC_VECTOR (30 downto 0);
    signal zext_ln75_2_fu_369_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal add_ln75_1_fu_373_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal zext_ln69_fu_383_p1 : STD_LOGIC_VECTOR (4 downto 0);
    signal add_ln71_1_fu_399_p2 : STD_LOGIC_VECTOR (4 downto 0);
    signal tmp_6_fu_405_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal zext_ln71_6_fu_417_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal add_ln71_5_fu_421_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    i_0_reg_104_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln66_fu_285_p2 = ap_const_lv1_1))) then 
                i_0_reg_104 <= i_reg_461;
            elsif (((icmp_ln64_fu_174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_0_reg_104 <= ap_const_lv5_0;
            end if; 
        end if;
    end process;

    j_0_reg_116_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_234_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                j_0_reg_116 <= ap_const_lv5_0;
            elsif (((icmp_ln68_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                j_0_reg_116 <= j_reg_474;
            end if; 
        end if;
    end process;

    k_0_reg_128_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_285_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                k_0_reg_128 <= ap_const_lv3_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln69_fu_387_p2 = ap_const_lv1_1))) then 
                k_0_reg_128 <= k_reg_482;
            end if; 
        end if;
    end process;

    l_0_reg_151_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                l_0_reg_151 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                l_0_reg_151 <= l_reg_500;
            end if; 
        end if;
    end process;

    nb_filtre_0_reg_93_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_234_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                nb_filtre_0_reg_93 <= nb_filtre_reg_443;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                nb_filtre_0_reg_93 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    res_4_reg_162_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
                res_4_reg_162 <= x_assign_reg_139;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
                res_4_reg_162 <= res_fu_435_p2;
            end if; 
        end if;
    end process;

    x_assign_reg_139_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln66_fu_285_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                x_assign_reg_139 <= ap_const_lv32_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln69_fu_387_p2 = ap_const_lv1_1))) then 
                x_assign_reg_139 <= res_4_reg_162;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln64_fu_174_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                add_ln71_2_reg_448 <= add_ln71_2_fu_206_p2;
                    sext_ln75_reg_453(9 downto 2) <= sext_ln75_fu_230_p1(9 downto 2);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln68_fu_301_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                add_ln71_4_reg_492 <= add_ln71_4_fu_340_p2;
                add_ln71_reg_487 <= add_ln71_fu_313_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                i_reg_461 <= i_fu_240_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                input_load_reg_515 <= input_r_q0;
                kernel_load_reg_520 <= kernel_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_474 <= j_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                k_reg_482 <= k_fu_307_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                l_reg_500 <= l_fu_393_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                mul_ln71_reg_525 <= mul_ln71_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                nb_filtre_reg_443 <= nb_filtre_fu_180_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((icmp_ln65_fu_234_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    sub_ln75_1_reg_466(12 downto 2) <= sub_ln75_1_fu_279_p2(12 downto 2);
            end if;
        end if;
    end process;
    sext_ln75_reg_453(1 downto 0) <= "00";
    sub_ln75_1_reg_466(1 downto 0) <= "00";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, icmp_ln64_fu_174_p2, ap_CS_fsm_state3, icmp_ln65_fu_234_p2, ap_CS_fsm_state4, ap_CS_fsm_state5, icmp_ln68_fu_301_p2, ap_CS_fsm_state6, icmp_ln69_fu_387_p2, icmp_ln66_fu_285_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((icmp_ln64_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                if (((icmp_ln65_fu_234_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (icmp_ln66_fu_285_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                if (((icmp_ln68_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state6;
                end if;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (icmp_ln69_fu_387_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state5;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    add_ln71_1_fu_399_p2 <= std_logic_vector(unsigned(zext_ln69_fu_383_p1) + unsigned(j_0_reg_116));
    add_ln71_2_fu_206_p2 <= std_logic_vector(unsigned(zext_ln71_fu_186_p1) + unsigned(zext_ln71_1_fu_198_p1));
    add_ln71_3_fu_323_p2 <= std_logic_vector(unsigned(zext_ln71_4_fu_319_p1) + unsigned(add_ln71_2_reg_448));
    add_ln71_4_fu_340_p2 <= std_logic_vector(unsigned(p_shl5_cast_fu_332_p3) + unsigned(zext_ln71_5_fu_328_p1));
    add_ln71_5_fu_421_p2 <= std_logic_vector(unsigned(add_ln71_4_reg_492) + unsigned(zext_ln71_6_fu_417_p1));
    add_ln71_fu_313_p2 <= std_logic_vector(unsigned(i_0_reg_104) + unsigned(zext_ln68_fu_297_p1));
    add_ln75_1_fu_373_p2 <= std_logic_vector(unsigned(sub_ln75_1_reg_466) + unsigned(zext_ln75_2_fu_369_p1));
    add_ln75_fu_250_p2 <= std_logic_vector(signed(sext_ln75_reg_453) + signed(zext_ln75_1_fu_246_p1));
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_CS_fsm_state2, icmp_ln64_fu_174_p2)
    begin
        if (((icmp_ln64_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, icmp_ln64_fu_174_p2)
    begin
        if (((icmp_ln64_fu_174_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    i_fu_240_p2 <= std_logic_vector(unsigned(i_0_reg_104) + unsigned(ap_const_lv5_1));
    icmp_ln13_fu_350_p2 <= "1" when (signed(x_assign_reg_139) > signed(ap_const_lv32_0)) else "0";
    icmp_ln64_fu_174_p2 <= "1" when (nb_filtre_0_reg_93 = ap_const_lv3_4) else "0";
    icmp_ln65_fu_234_p2 <= "1" when (i_0_reg_104 = ap_const_lv5_1C) else "0";
    icmp_ln66_fu_285_p2 <= "1" when (j_0_reg_116 = ap_const_lv5_1C) else "0";
    icmp_ln68_fu_301_p2 <= "1" when (k_0_reg_128 = ap_const_lv3_5) else "0";
    icmp_ln69_fu_387_p2 <= "1" when (l_0_reg_151 = ap_const_lv3_5) else "0";
    input_r_address0 <= zext_ln71_3_fu_412_p1(10 - 1 downto 0);

    input_r_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            input_r_ce0 <= ap_const_logic_1;
        else 
            input_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_fu_291_p2 <= std_logic_vector(unsigned(j_0_reg_116) + unsigned(ap_const_lv5_1));
    k_fu_307_p2 <= std_logic_vector(unsigned(k_0_reg_128) + unsigned(ap_const_lv3_1));
    kernel_address0 <= zext_ln71_7_fu_426_p1(7 - 1 downto 0);

    kernel_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            kernel_ce0 <= ap_const_logic_1;
        else 
            kernel_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    l_fu_393_p2 <= std_logic_vector(unsigned(l_0_reg_151) + unsigned(ap_const_lv3_1));
    mul_ln71_fu_431_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(kernel_load_reg_520) * signed(input_load_reg_515))), 32));
    nb_filtre_fu_180_p2 <= std_logic_vector(unsigned(nb_filtre_0_reg_93) + unsigned(ap_const_lv3_1));
    output_r_address0 <= zext_ln75_3_fu_378_p1(12 - 1 downto 0);

    output_r_ce0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_r_ce0 <= ap_const_logic_1;
        else 
            output_r_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    output_r_d0 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(return_value_fu_356_p3),32));

    output_r_we0_assign_proc : process(ap_CS_fsm_state5, icmp_ln68_fu_301_p2)
    begin
        if (((icmp_ln68_fu_301_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state5))) then 
            output_r_we0 <= ap_const_logic_1;
        else 
            output_r_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_shl3_cast_fu_259_p3 <= (trunc_ln75_fu_255_p1 & ap_const_lv5_0);
    p_shl5_cast_fu_332_p3 <= (add_ln71_3_fu_323_p2 & ap_const_lv2_0);
    res_fu_435_p2 <= std_logic_vector(unsigned(res_4_reg_162) + unsigned(mul_ln71_reg_525));
    return_value_fu_356_p3 <= 
        trunc_ln68_fu_346_p1 when (icmp_ln13_fu_350_p2(0) = '1') else 
        ap_const_lv31_0;
        sext_ln75_1_fu_275_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_2_fu_267_p3),13));

        sext_ln75_fu_230_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(sub_ln75_fu_224_p2),10));

    sub_ln75_1_fu_279_p2 <= std_logic_vector(unsigned(p_shl3_cast_fu_259_p3) - unsigned(sext_ln75_1_fu_275_p1));
    sub_ln75_fu_224_p2 <= std_logic_vector(unsigned(zext_ln75_fu_220_p1) - unsigned(zext_ln71_2_fu_202_p1));
    tmp_1_fu_212_p3 <= (nb_filtre_0_reg_93 & ap_const_lv5_0);
    tmp_2_fu_267_p3 <= (add_ln75_fu_250_p2 & ap_const_lv2_0);
    tmp_6_fu_405_p3 <= (add_ln71_reg_487 & add_ln71_1_fu_399_p2);
    tmp_fu_190_p3 <= (nb_filtre_0_reg_93 & ap_const_lv2_0);
    trunc_ln68_fu_346_p1 <= x_assign_reg_139(31 - 1 downto 0);
    trunc_ln75_fu_255_p1 <= add_ln75_fu_250_p2(8 - 1 downto 0);
    zext_ln68_fu_297_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_128),5));
    zext_ln69_fu_383_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_0_reg_151),5));
    zext_ln71_1_fu_198_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_190_p3),6));
    zext_ln71_2_fu_202_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_fu_190_p3),9));
    zext_ln71_3_fu_412_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_6_fu_405_p3),64));
    zext_ln71_4_fu_319_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(k_0_reg_128),6));
    zext_ln71_5_fu_328_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_3_fu_323_p2),8));
    zext_ln71_6_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(l_0_reg_151),8));
    zext_ln71_7_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln71_5_fu_421_p2),64));
    zext_ln71_fu_186_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(nb_filtre_0_reg_93),6));
    zext_ln75_1_fu_246_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_0_reg_104),10));
    zext_ln75_2_fu_369_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_0_reg_116),13));
    zext_ln75_3_fu_378_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(add_ln75_1_fu_373_p2),64));
    zext_ln75_fu_220_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_1_fu_212_p3),9));
end behav;
