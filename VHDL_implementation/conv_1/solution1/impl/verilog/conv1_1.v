// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="conv1_1,hls_ip_2019_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z010-clg400-2,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.050000,HLS_SYN_LAT=351465,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=3,HLS_SYN_FF=245,HLS_SYN_LUT=245,HLS_VERSION=2019_2}" *)

module conv1_1 (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        input_r_address0,
        input_r_ce0,
        input_r_q0,
        kernel_address0,
        kernel_ce0,
        kernel_q0,
        output_r_address0,
        output_r_ce0,
        output_r_we0,
        output_r_d0
);

parameter    ap_ST_fsm_state1 = 9'd1;
parameter    ap_ST_fsm_state2 = 9'd2;
parameter    ap_ST_fsm_state3 = 9'd4;
parameter    ap_ST_fsm_state4 = 9'd8;
parameter    ap_ST_fsm_state5 = 9'd16;
parameter    ap_ST_fsm_state6 = 9'd32;
parameter    ap_ST_fsm_state7 = 9'd64;
parameter    ap_ST_fsm_state8 = 9'd128;
parameter    ap_ST_fsm_state9 = 9'd256;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [9:0] input_r_address0;
output   input_r_ce0;
input  [31:0] input_r_q0;
output  [6:0] kernel_address0;
output   kernel_ce0;
input  [31:0] kernel_q0;
output  [11:0] output_r_address0;
output   output_r_ce0;
output   output_r_we0;
output  [31:0] output_r_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg input_r_ce0;
reg kernel_ce0;
reg output_r_ce0;
reg output_r_we0;

(* fsm_encoding = "none" *) reg   [8:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [2:0] nb_filtre_fu_180_p2;
reg   [2:0] nb_filtre_reg_443;
wire    ap_CS_fsm_state2;
wire   [5:0] add_ln71_2_fu_206_p2;
reg   [5:0] add_ln71_2_reg_448;
wire   [0:0] icmp_ln64_fu_174_p2;
wire  signed [9:0] sext_ln75_fu_230_p1;
reg  signed [9:0] sext_ln75_reg_453;
wire   [4:0] i_fu_240_p2;
reg   [4:0] i_reg_461;
wire    ap_CS_fsm_state3;
wire   [12:0] sub_ln75_1_fu_279_p2;
reg   [12:0] sub_ln75_1_reg_466;
wire   [0:0] icmp_ln65_fu_234_p2;
wire   [4:0] j_fu_291_p2;
reg   [4:0] j_reg_474;
wire    ap_CS_fsm_state4;
wire   [2:0] k_fu_307_p2;
reg   [2:0] k_reg_482;
wire    ap_CS_fsm_state5;
wire   [4:0] add_ln71_fu_313_p2;
reg   [4:0] add_ln71_reg_487;
wire   [0:0] icmp_ln68_fu_301_p2;
wire   [7:0] add_ln71_4_fu_340_p2;
reg   [7:0] add_ln71_4_reg_492;
wire   [2:0] l_fu_393_p2;
reg   [2:0] l_reg_500;
wire    ap_CS_fsm_state6;
wire   [0:0] icmp_ln69_fu_387_p2;
reg  signed [31:0] input_load_reg_515;
wire    ap_CS_fsm_state7;
reg  signed [31:0] kernel_load_reg_520;
wire   [31:0] mul_ln71_fu_431_p2;
reg   [31:0] mul_ln71_reg_525;
wire    ap_CS_fsm_state8;
wire   [31:0] res_fu_435_p2;
wire    ap_CS_fsm_state9;
reg   [2:0] nb_filtre_0_reg_93;
reg   [4:0] i_0_reg_104;
wire   [0:0] icmp_ln66_fu_285_p2;
reg   [4:0] j_0_reg_116;
reg   [2:0] k_0_reg_128;
reg   [31:0] x_assign_reg_139;
reg   [2:0] l_0_reg_151;
reg   [31:0] res_4_reg_162;
wire   [63:0] zext_ln75_3_fu_378_p1;
wire   [63:0] zext_ln71_3_fu_412_p1;
wire   [63:0] zext_ln71_7_fu_426_p1;
wire   [4:0] tmp_fu_190_p3;
wire   [5:0] zext_ln71_fu_186_p1;
wire   [5:0] zext_ln71_1_fu_198_p1;
wire   [7:0] tmp_1_fu_212_p3;
wire   [8:0] zext_ln75_fu_220_p1;
wire   [8:0] zext_ln71_2_fu_202_p1;
wire   [8:0] sub_ln75_fu_224_p2;
wire   [9:0] zext_ln75_1_fu_246_p1;
wire   [9:0] add_ln75_fu_250_p2;
wire   [7:0] trunc_ln75_fu_255_p1;
wire   [11:0] tmp_2_fu_267_p3;
wire   [12:0] p_shl3_cast_fu_259_p3;
wire  signed [12:0] sext_ln75_1_fu_275_p1;
wire   [4:0] zext_ln68_fu_297_p1;
wire   [5:0] zext_ln71_4_fu_319_p1;
wire   [5:0] add_ln71_3_fu_323_p2;
wire   [7:0] p_shl5_cast_fu_332_p3;
wire   [7:0] zext_ln71_5_fu_328_p1;
wire   [0:0] icmp_ln13_fu_350_p2;
wire   [30:0] trunc_ln68_fu_346_p1;
wire   [30:0] return_value_fu_356_p3;
wire   [12:0] zext_ln75_2_fu_369_p1;
wire   [12:0] add_ln75_1_fu_373_p2;
wire   [4:0] zext_ln69_fu_383_p1;
wire   [4:0] add_ln71_1_fu_399_p2;
wire   [9:0] tmp_6_fu_405_p3;
wire   [7:0] zext_ln71_6_fu_417_p1;
wire   [7:0] add_ln71_5_fu_421_p2;
reg   [8:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 9'd1;
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln66_fu_285_p2 == 1'd1))) begin
        i_0_reg_104 <= i_reg_461;
    end else if (((icmp_ln64_fu_174_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        i_0_reg_104 <= 5'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        j_0_reg_116 <= 5'd0;
    end else if (((icmp_ln68_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        j_0_reg_116 <= j_reg_474;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_285_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        k_0_reg_128 <= 3'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln69_fu_387_p2 == 1'd1))) begin
        k_0_reg_128 <= k_reg_482;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        l_0_reg_151 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        l_0_reg_151 <= l_reg_500;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_fu_234_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
        nb_filtre_0_reg_93 <= nb_filtre_reg_443;
    end else if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        nb_filtre_0_reg_93 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        res_4_reg_162 <= x_assign_reg_139;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        res_4_reg_162 <= res_fu_435_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln66_fu_285_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        x_assign_reg_139 <= 32'd0;
    end else if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln69_fu_387_p2 == 1'd1))) begin
        x_assign_reg_139 <= res_4_reg_162;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln64_fu_174_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state2))) begin
        add_ln71_2_reg_448 <= add_ln71_2_fu_206_p2;
        sext_ln75_reg_453[9 : 2] <= sext_ln75_fu_230_p1[9 : 2];
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln68_fu_301_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state5))) begin
        add_ln71_4_reg_492 <= add_ln71_4_fu_340_p2;
        add_ln71_reg_487 <= add_ln71_fu_313_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        i_reg_461 <= i_fu_240_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state7)) begin
        input_load_reg_515 <= input_r_q0;
        kernel_load_reg_520 <= kernel_q0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        j_reg_474 <= j_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        k_reg_482 <= k_fu_307_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        l_reg_500 <= l_fu_393_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        mul_ln71_reg_525 <= mul_ln71_fu_431_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        nb_filtre_reg_443 <= nb_filtre_fu_180_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((icmp_ln65_fu_234_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state3))) begin
        sub_ln75_1_reg_466[12 : 2] <= sub_ln75_1_fu_279_p2[12 : 2];
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln64_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        input_r_ce0 = 1'b1;
    end else begin
        input_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        kernel_ce0 = 1'b1;
    end else begin
        kernel_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        output_r_ce0 = 1'b1;
    end else begin
        output_r_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((icmp_ln68_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
        output_r_we0 = 1'b1;
    end else begin
        output_r_we0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((icmp_ln64_fu_174_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            if (((icmp_ln65_fu_234_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state3))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end
        end
        ap_ST_fsm_state4 : begin
            if (((1'b1 == ap_CS_fsm_state4) & (icmp_ln66_fu_285_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            if (((icmp_ln68_fu_301_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state5))) begin
                ap_NS_fsm = ap_ST_fsm_state4;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (icmp_ln69_fu_387_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign add_ln71_1_fu_399_p2 = (zext_ln69_fu_383_p1 + j_0_reg_116);

assign add_ln71_2_fu_206_p2 = (zext_ln71_fu_186_p1 + zext_ln71_1_fu_198_p1);

assign add_ln71_3_fu_323_p2 = (zext_ln71_4_fu_319_p1 + add_ln71_2_reg_448);

assign add_ln71_4_fu_340_p2 = (p_shl5_cast_fu_332_p3 + zext_ln71_5_fu_328_p1);

assign add_ln71_5_fu_421_p2 = (add_ln71_4_reg_492 + zext_ln71_6_fu_417_p1);

assign add_ln71_fu_313_p2 = (i_0_reg_104 + zext_ln68_fu_297_p1);

assign add_ln75_1_fu_373_p2 = (sub_ln75_1_reg_466 + zext_ln75_2_fu_369_p1);

assign add_ln75_fu_250_p2 = ($signed(sext_ln75_reg_453) + $signed(zext_ln75_1_fu_246_p1));

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign i_fu_240_p2 = (i_0_reg_104 + 5'd1);

assign icmp_ln13_fu_350_p2 = (($signed(x_assign_reg_139) > $signed(32'd0)) ? 1'b1 : 1'b0);

assign icmp_ln64_fu_174_p2 = ((nb_filtre_0_reg_93 == 3'd4) ? 1'b1 : 1'b0);

assign icmp_ln65_fu_234_p2 = ((i_0_reg_104 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln66_fu_285_p2 = ((j_0_reg_116 == 5'd28) ? 1'b1 : 1'b0);

assign icmp_ln68_fu_301_p2 = ((k_0_reg_128 == 3'd5) ? 1'b1 : 1'b0);

assign icmp_ln69_fu_387_p2 = ((l_0_reg_151 == 3'd5) ? 1'b1 : 1'b0);

assign input_r_address0 = zext_ln71_3_fu_412_p1;

assign j_fu_291_p2 = (j_0_reg_116 + 5'd1);

assign k_fu_307_p2 = (k_0_reg_128 + 3'd1);

assign kernel_address0 = zext_ln71_7_fu_426_p1;

assign l_fu_393_p2 = (l_0_reg_151 + 3'd1);

assign mul_ln71_fu_431_p2 = ($signed(kernel_load_reg_520) * $signed(input_load_reg_515));

assign nb_filtre_fu_180_p2 = (nb_filtre_0_reg_93 + 3'd1);

assign output_r_address0 = zext_ln75_3_fu_378_p1;

assign output_r_d0 = return_value_fu_356_p3;

assign p_shl3_cast_fu_259_p3 = {{trunc_ln75_fu_255_p1}, {5'd0}};

assign p_shl5_cast_fu_332_p3 = {{add_ln71_3_fu_323_p2}, {2'd0}};

assign res_fu_435_p2 = (res_4_reg_162 + mul_ln71_reg_525);

assign return_value_fu_356_p3 = ((icmp_ln13_fu_350_p2[0:0] === 1'b1) ? trunc_ln68_fu_346_p1 : 31'd0);

assign sext_ln75_1_fu_275_p1 = $signed(tmp_2_fu_267_p3);

assign sext_ln75_fu_230_p1 = $signed(sub_ln75_fu_224_p2);

assign sub_ln75_1_fu_279_p2 = ($signed(p_shl3_cast_fu_259_p3) - $signed(sext_ln75_1_fu_275_p1));

assign sub_ln75_fu_224_p2 = (zext_ln75_fu_220_p1 - zext_ln71_2_fu_202_p1);

assign tmp_1_fu_212_p3 = {{nb_filtre_0_reg_93}, {5'd0}};

assign tmp_2_fu_267_p3 = {{add_ln75_fu_250_p2}, {2'd0}};

assign tmp_6_fu_405_p3 = {{add_ln71_reg_487}, {add_ln71_1_fu_399_p2}};

assign tmp_fu_190_p3 = {{nb_filtre_0_reg_93}, {2'd0}};

assign trunc_ln68_fu_346_p1 = x_assign_reg_139[30:0];

assign trunc_ln75_fu_255_p1 = add_ln75_fu_250_p2[7:0];

assign zext_ln68_fu_297_p1 = k_0_reg_128;

assign zext_ln69_fu_383_p1 = l_0_reg_151;

assign zext_ln71_1_fu_198_p1 = tmp_fu_190_p3;

assign zext_ln71_2_fu_202_p1 = tmp_fu_190_p3;

assign zext_ln71_3_fu_412_p1 = tmp_6_fu_405_p3;

assign zext_ln71_4_fu_319_p1 = k_0_reg_128;

assign zext_ln71_5_fu_328_p1 = add_ln71_3_fu_323_p2;

assign zext_ln71_6_fu_417_p1 = l_0_reg_151;

assign zext_ln71_7_fu_426_p1 = add_ln71_5_fu_421_p2;

assign zext_ln71_fu_186_p1 = nb_filtre_0_reg_93;

assign zext_ln75_1_fu_246_p1 = i_0_reg_104;

assign zext_ln75_2_fu_369_p1 = j_0_reg_116;

assign zext_ln75_3_fu_378_p1 = add_ln75_1_fu_373_p2;

assign zext_ln75_fu_220_p1 = tmp_1_fu_212_p3;

always @ (posedge ap_clk) begin
    sext_ln75_reg_453[1:0] <= 2'b00;
    sub_ln75_1_reg_466[1:0] <= 2'b00;
end

endmodule //conv1_1
