// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and OpenCL
// Version: 2019.2
// Copyright (C) 1986-2019 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "conv1_1.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic conv1_1::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic conv1_1::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<9> conv1_1::ap_ST_fsm_state1 = "1";
const sc_lv<9> conv1_1::ap_ST_fsm_state2 = "10";
const sc_lv<9> conv1_1::ap_ST_fsm_state3 = "100";
const sc_lv<9> conv1_1::ap_ST_fsm_state4 = "1000";
const sc_lv<9> conv1_1::ap_ST_fsm_state5 = "10000";
const sc_lv<9> conv1_1::ap_ST_fsm_state6 = "100000";
const sc_lv<9> conv1_1::ap_ST_fsm_state7 = "1000000";
const sc_lv<9> conv1_1::ap_ST_fsm_state8 = "10000000";
const sc_lv<9> conv1_1::ap_ST_fsm_state9 = "100000000";
const sc_lv<32> conv1_1::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<32> conv1_1::ap_const_lv32_1 = "1";
const sc_lv<1> conv1_1::ap_const_lv1_0 = "0";
const sc_lv<32> conv1_1::ap_const_lv32_2 = "10";
const sc_lv<32> conv1_1::ap_const_lv32_3 = "11";
const sc_lv<32> conv1_1::ap_const_lv32_4 = "100";
const sc_lv<32> conv1_1::ap_const_lv32_5 = "101";
const sc_lv<32> conv1_1::ap_const_lv32_6 = "110";
const sc_lv<32> conv1_1::ap_const_lv32_7 = "111";
const sc_lv<32> conv1_1::ap_const_lv32_8 = "1000";
const sc_lv<3> conv1_1::ap_const_lv3_0 = "000";
const sc_lv<1> conv1_1::ap_const_lv1_1 = "1";
const sc_lv<5> conv1_1::ap_const_lv5_0 = "00000";
const sc_lv<3> conv1_1::ap_const_lv3_4 = "100";
const sc_lv<3> conv1_1::ap_const_lv3_1 = "1";
const sc_lv<2> conv1_1::ap_const_lv2_0 = "00";
const sc_lv<5> conv1_1::ap_const_lv5_1C = "11100";
const sc_lv<5> conv1_1::ap_const_lv5_1 = "1";
const sc_lv<3> conv1_1::ap_const_lv3_5 = "101";
const sc_lv<31> conv1_1::ap_const_lv31_0 = "0000000000000000000000000000000";
const bool conv1_1::ap_const_boolean_1 = true;

conv1_1::conv1_1(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_add_ln71_1_fu_399_p2);
    sensitive << ( j_0_reg_116 );
    sensitive << ( zext_ln69_fu_383_p1 );

    SC_METHOD(thread_add_ln71_2_fu_206_p2);
    sensitive << ( zext_ln71_fu_186_p1 );
    sensitive << ( zext_ln71_1_fu_198_p1 );

    SC_METHOD(thread_add_ln71_3_fu_323_p2);
    sensitive << ( add_ln71_2_reg_448 );
    sensitive << ( zext_ln71_4_fu_319_p1 );

    SC_METHOD(thread_add_ln71_4_fu_340_p2);
    sensitive << ( p_shl5_cast_fu_332_p3 );
    sensitive << ( zext_ln71_5_fu_328_p1 );

    SC_METHOD(thread_add_ln71_5_fu_421_p2);
    sensitive << ( add_ln71_4_reg_492 );
    sensitive << ( zext_ln71_6_fu_417_p1 );

    SC_METHOD(thread_add_ln71_fu_313_p2);
    sensitive << ( i_0_reg_104 );
    sensitive << ( zext_ln68_fu_297_p1 );

    SC_METHOD(thread_add_ln75_1_fu_373_p2);
    sensitive << ( sub_ln75_1_reg_466 );
    sensitive << ( zext_ln75_2_fu_369_p1 );

    SC_METHOD(thread_add_ln75_fu_250_p2);
    sensitive << ( sext_ln75_reg_453 );
    sensitive << ( zext_ln75_1_fu_246_p1 );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state4);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state5);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state6);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state7);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state8);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state9);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln64_fu_174_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln64_fu_174_p2 );

    SC_METHOD(thread_i_fu_240_p2);
    sensitive << ( i_0_reg_104 );

    SC_METHOD(thread_icmp_ln13_fu_350_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln68_fu_301_p2 );
    sensitive << ( x_assign_reg_139 );

    SC_METHOD(thread_icmp_ln64_fu_174_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( nb_filtre_0_reg_93 );

    SC_METHOD(thread_icmp_ln65_fu_234_p2);
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( i_0_reg_104 );

    SC_METHOD(thread_icmp_ln66_fu_285_p2);
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( j_0_reg_116 );

    SC_METHOD(thread_icmp_ln68_fu_301_p2);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( k_0_reg_128 );

    SC_METHOD(thread_icmp_ln69_fu_387_p2);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( l_0_reg_151 );

    SC_METHOD(thread_input_r_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln71_3_fu_412_p1 );

    SC_METHOD(thread_input_r_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_j_fu_291_p2);
    sensitive << ( j_0_reg_116 );

    SC_METHOD(thread_k_fu_307_p2);
    sensitive << ( k_0_reg_128 );

    SC_METHOD(thread_kernel_address0);
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( zext_ln71_7_fu_426_p1 );

    SC_METHOD(thread_kernel_ce0);
    sensitive << ( ap_CS_fsm_state6 );

    SC_METHOD(thread_l_fu_393_p2);
    sensitive << ( l_0_reg_151 );

    SC_METHOD(thread_mul_ln71_fu_431_p2);
    sensitive << ( input_load_reg_515 );
    sensitive << ( kernel_load_reg_520 );

    SC_METHOD(thread_nb_filtre_fu_180_p2);
    sensitive << ( nb_filtre_0_reg_93 );

    SC_METHOD(thread_output_r_address0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( zext_ln75_3_fu_378_p1 );

    SC_METHOD(thread_output_r_ce0);
    sensitive << ( ap_CS_fsm_state5 );

    SC_METHOD(thread_output_r_d0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( return_value_fu_356_p3 );

    SC_METHOD(thread_output_r_we0);
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln68_fu_301_p2 );

    SC_METHOD(thread_p_shl3_cast_fu_259_p3);
    sensitive << ( trunc_ln75_fu_255_p1 );

    SC_METHOD(thread_p_shl5_cast_fu_332_p3);
    sensitive << ( add_ln71_3_fu_323_p2 );

    SC_METHOD(thread_res_fu_435_p2);
    sensitive << ( mul_ln71_reg_525 );
    sensitive << ( res_4_reg_162 );

    SC_METHOD(thread_return_value_fu_356_p3);
    sensitive << ( icmp_ln13_fu_350_p2 );
    sensitive << ( trunc_ln68_fu_346_p1 );

    SC_METHOD(thread_sext_ln75_1_fu_275_p1);
    sensitive << ( tmp_2_fu_267_p3 );

    SC_METHOD(thread_sext_ln75_fu_230_p1);
    sensitive << ( sub_ln75_fu_224_p2 );

    SC_METHOD(thread_sub_ln75_1_fu_279_p2);
    sensitive << ( p_shl3_cast_fu_259_p3 );
    sensitive << ( sext_ln75_1_fu_275_p1 );

    SC_METHOD(thread_sub_ln75_fu_224_p2);
    sensitive << ( zext_ln75_fu_220_p1 );
    sensitive << ( zext_ln71_2_fu_202_p1 );

    SC_METHOD(thread_tmp_1_fu_212_p3);
    sensitive << ( nb_filtre_0_reg_93 );

    SC_METHOD(thread_tmp_2_fu_267_p3);
    sensitive << ( add_ln75_fu_250_p2 );

    SC_METHOD(thread_tmp_6_fu_405_p3);
    sensitive << ( add_ln71_reg_487 );
    sensitive << ( add_ln71_1_fu_399_p2 );

    SC_METHOD(thread_tmp_fu_190_p3);
    sensitive << ( nb_filtre_0_reg_93 );

    SC_METHOD(thread_trunc_ln68_fu_346_p1);
    sensitive << ( x_assign_reg_139 );

    SC_METHOD(thread_trunc_ln75_fu_255_p1);
    sensitive << ( add_ln75_fu_250_p2 );

    SC_METHOD(thread_zext_ln68_fu_297_p1);
    sensitive << ( k_0_reg_128 );

    SC_METHOD(thread_zext_ln69_fu_383_p1);
    sensitive << ( l_0_reg_151 );

    SC_METHOD(thread_zext_ln71_1_fu_198_p1);
    sensitive << ( tmp_fu_190_p3 );

    SC_METHOD(thread_zext_ln71_2_fu_202_p1);
    sensitive << ( tmp_fu_190_p3 );

    SC_METHOD(thread_zext_ln71_3_fu_412_p1);
    sensitive << ( tmp_6_fu_405_p3 );

    SC_METHOD(thread_zext_ln71_4_fu_319_p1);
    sensitive << ( k_0_reg_128 );

    SC_METHOD(thread_zext_ln71_5_fu_328_p1);
    sensitive << ( add_ln71_3_fu_323_p2 );

    SC_METHOD(thread_zext_ln71_6_fu_417_p1);
    sensitive << ( l_0_reg_151 );

    SC_METHOD(thread_zext_ln71_7_fu_426_p1);
    sensitive << ( add_ln71_5_fu_421_p2 );

    SC_METHOD(thread_zext_ln71_fu_186_p1);
    sensitive << ( nb_filtre_0_reg_93 );

    SC_METHOD(thread_zext_ln75_1_fu_246_p1);
    sensitive << ( i_0_reg_104 );

    SC_METHOD(thread_zext_ln75_2_fu_369_p1);
    sensitive << ( j_0_reg_116 );

    SC_METHOD(thread_zext_ln75_3_fu_378_p1);
    sensitive << ( add_ln75_1_fu_373_p2 );

    SC_METHOD(thread_zext_ln75_fu_220_p1);
    sensitive << ( tmp_1_fu_212_p3 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( icmp_ln64_fu_174_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( icmp_ln65_fu_234_p2 );
    sensitive << ( ap_CS_fsm_state4 );
    sensitive << ( ap_CS_fsm_state5 );
    sensitive << ( icmp_ln68_fu_301_p2 );
    sensitive << ( ap_CS_fsm_state6 );
    sensitive << ( icmp_ln69_fu_387_p2 );
    sensitive << ( icmp_ln66_fu_285_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    ap_CS_fsm = "000000001";
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "conv1_1_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, input_r_address0, "(port)input_r_address0");
    sc_trace(mVcdFile, input_r_ce0, "(port)input_r_ce0");
    sc_trace(mVcdFile, input_r_q0, "(port)input_r_q0");
    sc_trace(mVcdFile, kernel_address0, "(port)kernel_address0");
    sc_trace(mVcdFile, kernel_ce0, "(port)kernel_ce0");
    sc_trace(mVcdFile, kernel_q0, "(port)kernel_q0");
    sc_trace(mVcdFile, output_r_address0, "(port)output_r_address0");
    sc_trace(mVcdFile, output_r_ce0, "(port)output_r_ce0");
    sc_trace(mVcdFile, output_r_we0, "(port)output_r_we0");
    sc_trace(mVcdFile, output_r_d0, "(port)output_r_d0");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, nb_filtre_fu_180_p2, "nb_filtre_fu_180_p2");
    sc_trace(mVcdFile, nb_filtre_reg_443, "nb_filtre_reg_443");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, add_ln71_2_fu_206_p2, "add_ln71_2_fu_206_p2");
    sc_trace(mVcdFile, add_ln71_2_reg_448, "add_ln71_2_reg_448");
    sc_trace(mVcdFile, icmp_ln64_fu_174_p2, "icmp_ln64_fu_174_p2");
    sc_trace(mVcdFile, sext_ln75_fu_230_p1, "sext_ln75_fu_230_p1");
    sc_trace(mVcdFile, sext_ln75_reg_453, "sext_ln75_reg_453");
    sc_trace(mVcdFile, i_fu_240_p2, "i_fu_240_p2");
    sc_trace(mVcdFile, i_reg_461, "i_reg_461");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, sub_ln75_1_fu_279_p2, "sub_ln75_1_fu_279_p2");
    sc_trace(mVcdFile, sub_ln75_1_reg_466, "sub_ln75_1_reg_466");
    sc_trace(mVcdFile, icmp_ln65_fu_234_p2, "icmp_ln65_fu_234_p2");
    sc_trace(mVcdFile, j_fu_291_p2, "j_fu_291_p2");
    sc_trace(mVcdFile, j_reg_474, "j_reg_474");
    sc_trace(mVcdFile, ap_CS_fsm_state4, "ap_CS_fsm_state4");
    sc_trace(mVcdFile, k_fu_307_p2, "k_fu_307_p2");
    sc_trace(mVcdFile, k_reg_482, "k_reg_482");
    sc_trace(mVcdFile, ap_CS_fsm_state5, "ap_CS_fsm_state5");
    sc_trace(mVcdFile, add_ln71_fu_313_p2, "add_ln71_fu_313_p2");
    sc_trace(mVcdFile, add_ln71_reg_487, "add_ln71_reg_487");
    sc_trace(mVcdFile, icmp_ln68_fu_301_p2, "icmp_ln68_fu_301_p2");
    sc_trace(mVcdFile, add_ln71_4_fu_340_p2, "add_ln71_4_fu_340_p2");
    sc_trace(mVcdFile, add_ln71_4_reg_492, "add_ln71_4_reg_492");
    sc_trace(mVcdFile, l_fu_393_p2, "l_fu_393_p2");
    sc_trace(mVcdFile, l_reg_500, "l_reg_500");
    sc_trace(mVcdFile, ap_CS_fsm_state6, "ap_CS_fsm_state6");
    sc_trace(mVcdFile, icmp_ln69_fu_387_p2, "icmp_ln69_fu_387_p2");
    sc_trace(mVcdFile, input_load_reg_515, "input_load_reg_515");
    sc_trace(mVcdFile, ap_CS_fsm_state7, "ap_CS_fsm_state7");
    sc_trace(mVcdFile, kernel_load_reg_520, "kernel_load_reg_520");
    sc_trace(mVcdFile, mul_ln71_fu_431_p2, "mul_ln71_fu_431_p2");
    sc_trace(mVcdFile, mul_ln71_reg_525, "mul_ln71_reg_525");
    sc_trace(mVcdFile, ap_CS_fsm_state8, "ap_CS_fsm_state8");
    sc_trace(mVcdFile, res_fu_435_p2, "res_fu_435_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state9, "ap_CS_fsm_state9");
    sc_trace(mVcdFile, nb_filtre_0_reg_93, "nb_filtre_0_reg_93");
    sc_trace(mVcdFile, i_0_reg_104, "i_0_reg_104");
    sc_trace(mVcdFile, icmp_ln66_fu_285_p2, "icmp_ln66_fu_285_p2");
    sc_trace(mVcdFile, j_0_reg_116, "j_0_reg_116");
    sc_trace(mVcdFile, k_0_reg_128, "k_0_reg_128");
    sc_trace(mVcdFile, x_assign_reg_139, "x_assign_reg_139");
    sc_trace(mVcdFile, l_0_reg_151, "l_0_reg_151");
    sc_trace(mVcdFile, res_4_reg_162, "res_4_reg_162");
    sc_trace(mVcdFile, zext_ln75_3_fu_378_p1, "zext_ln75_3_fu_378_p1");
    sc_trace(mVcdFile, zext_ln71_3_fu_412_p1, "zext_ln71_3_fu_412_p1");
    sc_trace(mVcdFile, zext_ln71_7_fu_426_p1, "zext_ln71_7_fu_426_p1");
    sc_trace(mVcdFile, tmp_fu_190_p3, "tmp_fu_190_p3");
    sc_trace(mVcdFile, zext_ln71_fu_186_p1, "zext_ln71_fu_186_p1");
    sc_trace(mVcdFile, zext_ln71_1_fu_198_p1, "zext_ln71_1_fu_198_p1");
    sc_trace(mVcdFile, tmp_1_fu_212_p3, "tmp_1_fu_212_p3");
    sc_trace(mVcdFile, zext_ln75_fu_220_p1, "zext_ln75_fu_220_p1");
    sc_trace(mVcdFile, zext_ln71_2_fu_202_p1, "zext_ln71_2_fu_202_p1");
    sc_trace(mVcdFile, sub_ln75_fu_224_p2, "sub_ln75_fu_224_p2");
    sc_trace(mVcdFile, zext_ln75_1_fu_246_p1, "zext_ln75_1_fu_246_p1");
    sc_trace(mVcdFile, add_ln75_fu_250_p2, "add_ln75_fu_250_p2");
    sc_trace(mVcdFile, trunc_ln75_fu_255_p1, "trunc_ln75_fu_255_p1");
    sc_trace(mVcdFile, tmp_2_fu_267_p3, "tmp_2_fu_267_p3");
    sc_trace(mVcdFile, p_shl3_cast_fu_259_p3, "p_shl3_cast_fu_259_p3");
    sc_trace(mVcdFile, sext_ln75_1_fu_275_p1, "sext_ln75_1_fu_275_p1");
    sc_trace(mVcdFile, zext_ln68_fu_297_p1, "zext_ln68_fu_297_p1");
    sc_trace(mVcdFile, zext_ln71_4_fu_319_p1, "zext_ln71_4_fu_319_p1");
    sc_trace(mVcdFile, add_ln71_3_fu_323_p2, "add_ln71_3_fu_323_p2");
    sc_trace(mVcdFile, p_shl5_cast_fu_332_p3, "p_shl5_cast_fu_332_p3");
    sc_trace(mVcdFile, zext_ln71_5_fu_328_p1, "zext_ln71_5_fu_328_p1");
    sc_trace(mVcdFile, icmp_ln13_fu_350_p2, "icmp_ln13_fu_350_p2");
    sc_trace(mVcdFile, trunc_ln68_fu_346_p1, "trunc_ln68_fu_346_p1");
    sc_trace(mVcdFile, return_value_fu_356_p3, "return_value_fu_356_p3");
    sc_trace(mVcdFile, zext_ln75_2_fu_369_p1, "zext_ln75_2_fu_369_p1");
    sc_trace(mVcdFile, add_ln75_1_fu_373_p2, "add_ln75_1_fu_373_p2");
    sc_trace(mVcdFile, zext_ln69_fu_383_p1, "zext_ln69_fu_383_p1");
    sc_trace(mVcdFile, add_ln71_1_fu_399_p2, "add_ln71_1_fu_399_p2");
    sc_trace(mVcdFile, tmp_6_fu_405_p3, "tmp_6_fu_405_p3");
    sc_trace(mVcdFile, zext_ln71_6_fu_417_p1, "zext_ln71_6_fu_417_p1");
    sc_trace(mVcdFile, add_ln71_5_fu_421_p2, "add_ln71_5_fu_421_p2");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
    mHdltvinHandle.open("conv1_1.hdltvin.dat");
    mHdltvoutHandle.open("conv1_1.hdltvout.dat");
}

conv1_1::~conv1_1() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void conv1_1::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln66_fu_285_p2.read()))) {
        i_0_reg_104 = i_reg_461.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                esl_seteq<1,1,1>(icmp_ln64_fu_174_p2.read(), ap_const_lv1_0))) {
        i_0_reg_104 = ap_const_lv5_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln65_fu_234_p2.read()))) {
        j_0_reg_116 = ap_const_lv5_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
                esl_seteq<1,1,1>(icmp_ln68_fu_301_p2.read(), ap_const_lv1_1))) {
        j_0_reg_116 = j_reg_474.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln66_fu_285_p2.read()))) {
        k_0_reg_128 = ap_const_lv3_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(icmp_ln69_fu_387_p2.read(), ap_const_lv1_1))) {
        k_0_reg_128 = k_reg_482.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_fu_301_p2.read()))) {
        l_0_reg_151 = ap_const_lv3_0;
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        l_0_reg_151 = l_reg_500.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
         esl_seteq<1,1,1>(icmp_ln65_fu_234_p2.read(), ap_const_lv1_1))) {
        nb_filtre_0_reg_93 = nb_filtre_reg_443.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
        nb_filtre_0_reg_93 = ap_const_lv3_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_fu_301_p2.read()))) {
        res_4_reg_162 = x_assign_reg_139.read();
    } else if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state9.read())) {
        res_4_reg_162 = res_fu_435_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && 
         esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln66_fu_285_p2.read()))) {
        x_assign_reg_139 = ap_const_lv32_0;
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && 
                esl_seteq<1,1,1>(icmp_ln69_fu_387_p2.read(), ap_const_lv1_1))) {
        x_assign_reg_139 = res_4_reg_162.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln64_fu_174_p2.read(), ap_const_lv1_0))) {
        add_ln71_2_reg_448 = add_ln71_2_fu_206_p2.read();
        sext_ln75_reg_453 = sext_ln75_fu_230_p1.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln68_fu_301_p2.read()))) {
        add_ln71_4_reg_492 = add_ln71_4_fu_340_p2.read();
        add_ln71_reg_487 = add_ln71_fu_313_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read())) {
        i_reg_461 = i_fu_240_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state7.read())) {
        input_load_reg_515 = input_r_q0.read();
        kernel_load_reg_520 = kernel_q0.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read())) {
        j_reg_474 = j_fu_291_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        k_reg_482 = k_fu_307_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        l_reg_500 = l_fu_393_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state8.read())) {
        mul_ln71_reg_525 = mul_ln71_fu_431_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read())) {
        nb_filtre_reg_443 = nb_filtre_fu_180_p2.read();
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_const_lv1_0, icmp_ln65_fu_234_p2.read()))) {
        sub_ln75_1_reg_466 = sub_ln75_1_fu_279_p2.read();
    }
}

void conv1_1::thread_add_ln71_1_fu_399_p2() {
    add_ln71_1_fu_399_p2 = (!zext_ln69_fu_383_p1.read().is_01() || !j_0_reg_116.read().is_01())? sc_lv<5>(): (sc_biguint<5>(zext_ln69_fu_383_p1.read()) + sc_biguint<5>(j_0_reg_116.read()));
}

void conv1_1::thread_add_ln71_2_fu_206_p2() {
    add_ln71_2_fu_206_p2 = (!zext_ln71_fu_186_p1.read().is_01() || !zext_ln71_1_fu_198_p1.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln71_fu_186_p1.read()) + sc_biguint<6>(zext_ln71_1_fu_198_p1.read()));
}

void conv1_1::thread_add_ln71_3_fu_323_p2() {
    add_ln71_3_fu_323_p2 = (!zext_ln71_4_fu_319_p1.read().is_01() || !add_ln71_2_reg_448.read().is_01())? sc_lv<6>(): (sc_biguint<6>(zext_ln71_4_fu_319_p1.read()) + sc_biguint<6>(add_ln71_2_reg_448.read()));
}

void conv1_1::thread_add_ln71_4_fu_340_p2() {
    add_ln71_4_fu_340_p2 = (!p_shl5_cast_fu_332_p3.read().is_01() || !zext_ln71_5_fu_328_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(p_shl5_cast_fu_332_p3.read()) + sc_biguint<8>(zext_ln71_5_fu_328_p1.read()));
}

void conv1_1::thread_add_ln71_5_fu_421_p2() {
    add_ln71_5_fu_421_p2 = (!add_ln71_4_reg_492.read().is_01() || !zext_ln71_6_fu_417_p1.read().is_01())? sc_lv<8>(): (sc_biguint<8>(add_ln71_4_reg_492.read()) + sc_biguint<8>(zext_ln71_6_fu_417_p1.read()));
}

void conv1_1::thread_add_ln71_fu_313_p2() {
    add_ln71_fu_313_p2 = (!i_0_reg_104.read().is_01() || !zext_ln68_fu_297_p1.read().is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_reg_104.read()) + sc_biguint<5>(zext_ln68_fu_297_p1.read()));
}

void conv1_1::thread_add_ln75_1_fu_373_p2() {
    add_ln75_1_fu_373_p2 = (!sub_ln75_1_reg_466.read().is_01() || !zext_ln75_2_fu_369_p1.read().is_01())? sc_lv<13>(): (sc_biguint<13>(sub_ln75_1_reg_466.read()) + sc_biguint<13>(zext_ln75_2_fu_369_p1.read()));
}

void conv1_1::thread_add_ln75_fu_250_p2() {
    add_ln75_fu_250_p2 = (!sext_ln75_reg_453.read().is_01() || !zext_ln75_1_fu_246_p1.read().is_01())? sc_lv<10>(): (sc_bigint<10>(sext_ln75_reg_453.read()) + sc_biguint<10>(zext_ln75_1_fu_246_p1.read()));
}

void conv1_1::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void conv1_1::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void conv1_1::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void conv1_1::thread_ap_CS_fsm_state4() {
    ap_CS_fsm_state4 = ap_CS_fsm.read()[3];
}

void conv1_1::thread_ap_CS_fsm_state5() {
    ap_CS_fsm_state5 = ap_CS_fsm.read()[4];
}

void conv1_1::thread_ap_CS_fsm_state6() {
    ap_CS_fsm_state6 = ap_CS_fsm.read()[5];
}

void conv1_1::thread_ap_CS_fsm_state7() {
    ap_CS_fsm_state7 = ap_CS_fsm.read()[6];
}

void conv1_1::thread_ap_CS_fsm_state8() {
    ap_CS_fsm_state8 = ap_CS_fsm.read()[7];
}

void conv1_1::thread_ap_CS_fsm_state9() {
    ap_CS_fsm_state9 = ap_CS_fsm.read()[8];
}

void conv1_1::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln64_fu_174_p2.read(), ap_const_lv1_1))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_const_logic_0;
    }
}

void conv1_1::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void conv1_1::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(icmp_ln64_fu_174_p2.read(), ap_const_lv1_1))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void conv1_1::thread_i_fu_240_p2() {
    i_fu_240_p2 = (!i_0_reg_104.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_reg_104.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void conv1_1::thread_icmp_ln13_fu_350_p2() {
    icmp_ln13_fu_350_p2 = (!x_assign_reg_139.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): (sc_bigint<32>(x_assign_reg_139.read()) > sc_bigint<32>(ap_const_lv32_0));
}

void conv1_1::thread_icmp_ln64_fu_174_p2() {
    icmp_ln64_fu_174_p2 = (!nb_filtre_0_reg_93.read().is_01() || !ap_const_lv3_4.is_01())? sc_lv<1>(): sc_lv<1>(nb_filtre_0_reg_93.read() == ap_const_lv3_4);
}

void conv1_1::thread_icmp_ln65_fu_234_p2() {
    icmp_ln65_fu_234_p2 = (!i_0_reg_104.read().is_01() || !ap_const_lv5_1C.is_01())? sc_lv<1>(): sc_lv<1>(i_0_reg_104.read() == ap_const_lv5_1C);
}

void conv1_1::thread_icmp_ln66_fu_285_p2() {
    icmp_ln66_fu_285_p2 = (!j_0_reg_116.read().is_01() || !ap_const_lv5_1C.is_01())? sc_lv<1>(): sc_lv<1>(j_0_reg_116.read() == ap_const_lv5_1C);
}

void conv1_1::thread_icmp_ln68_fu_301_p2() {
    icmp_ln68_fu_301_p2 = (!k_0_reg_128.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(k_0_reg_128.read() == ap_const_lv3_5);
}

void conv1_1::thread_icmp_ln69_fu_387_p2() {
    icmp_ln69_fu_387_p2 = (!l_0_reg_151.read().is_01() || !ap_const_lv3_5.is_01())? sc_lv<1>(): sc_lv<1>(l_0_reg_151.read() == ap_const_lv3_5);
}

void conv1_1::thread_input_r_address0() {
    input_r_address0 =  (sc_lv<10>) (zext_ln71_3_fu_412_p1.read());
}

void conv1_1::thread_input_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        input_r_ce0 = ap_const_logic_1;
    } else {
        input_r_ce0 = ap_const_logic_0;
    }
}

void conv1_1::thread_j_fu_291_p2() {
    j_fu_291_p2 = (!j_0_reg_116.read().is_01() || !ap_const_lv5_1.is_01())? sc_lv<5>(): (sc_biguint<5>(j_0_reg_116.read()) + sc_biguint<5>(ap_const_lv5_1));
}

void conv1_1::thread_k_fu_307_p2() {
    k_fu_307_p2 = (!k_0_reg_128.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(k_0_reg_128.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void conv1_1::thread_kernel_address0() {
    kernel_address0 =  (sc_lv<7>) (zext_ln71_7_fu_426_p1.read());
}

void conv1_1::thread_kernel_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read())) {
        kernel_ce0 = ap_const_logic_1;
    } else {
        kernel_ce0 = ap_const_logic_0;
    }
}

void conv1_1::thread_l_fu_393_p2() {
    l_fu_393_p2 = (!l_0_reg_151.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(l_0_reg_151.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void conv1_1::thread_mul_ln71_fu_431_p2() {
    mul_ln71_fu_431_p2 = (!kernel_load_reg_520.read().is_01() || !input_load_reg_515.read().is_01())? sc_lv<32>(): sc_bigint<32>(kernel_load_reg_520.read()) * sc_bigint<32>(input_load_reg_515.read());
}

void conv1_1::thread_nb_filtre_fu_180_p2() {
    nb_filtre_fu_180_p2 = (!nb_filtre_0_reg_93.read().is_01() || !ap_const_lv3_1.is_01())? sc_lv<3>(): (sc_biguint<3>(nb_filtre_0_reg_93.read()) + sc_biguint<3>(ap_const_lv3_1));
}

void conv1_1::thread_output_r_address0() {
    output_r_address0 =  (sc_lv<12>) (zext_ln75_3_fu_378_p1.read());
}

void conv1_1::thread_output_r_ce0() {
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read())) {
        output_r_ce0 = ap_const_logic_1;
    } else {
        output_r_ce0 = ap_const_logic_0;
    }
}

void conv1_1::thread_output_r_d0() {
    output_r_d0 = esl_zext<32,31>(return_value_fu_356_p3.read());
}

void conv1_1::thread_output_r_we0() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && 
         esl_seteq<1,1,1>(icmp_ln68_fu_301_p2.read(), ap_const_lv1_1))) {
        output_r_we0 = ap_const_logic_1;
    } else {
        output_r_we0 = ap_const_logic_0;
    }
}

void conv1_1::thread_p_shl3_cast_fu_259_p3() {
    p_shl3_cast_fu_259_p3 = esl_concat<8,5>(trunc_ln75_fu_255_p1.read(), ap_const_lv5_0);
}

void conv1_1::thread_p_shl5_cast_fu_332_p3() {
    p_shl5_cast_fu_332_p3 = esl_concat<6,2>(add_ln71_3_fu_323_p2.read(), ap_const_lv2_0);
}

void conv1_1::thread_res_fu_435_p2() {
    res_fu_435_p2 = (!res_4_reg_162.read().is_01() || !mul_ln71_reg_525.read().is_01())? sc_lv<32>(): (sc_biguint<32>(res_4_reg_162.read()) + sc_biguint<32>(mul_ln71_reg_525.read()));
}

void conv1_1::thread_return_value_fu_356_p3() {
    return_value_fu_356_p3 = (!icmp_ln13_fu_350_p2.read()[0].is_01())? sc_lv<31>(): ((icmp_ln13_fu_350_p2.read()[0].to_bool())? trunc_ln68_fu_346_p1.read(): ap_const_lv31_0);
}

void conv1_1::thread_sext_ln75_1_fu_275_p1() {
    sext_ln75_1_fu_275_p1 = esl_sext<13,12>(tmp_2_fu_267_p3.read());
}

void conv1_1::thread_sext_ln75_fu_230_p1() {
    sext_ln75_fu_230_p1 = esl_sext<10,9>(sub_ln75_fu_224_p2.read());
}

void conv1_1::thread_sub_ln75_1_fu_279_p2() {
    sub_ln75_1_fu_279_p2 = (!p_shl3_cast_fu_259_p3.read().is_01() || !sext_ln75_1_fu_275_p1.read().is_01())? sc_lv<13>(): (sc_biguint<13>(p_shl3_cast_fu_259_p3.read()) - sc_bigint<13>(sext_ln75_1_fu_275_p1.read()));
}

void conv1_1::thread_sub_ln75_fu_224_p2() {
    sub_ln75_fu_224_p2 = (!zext_ln75_fu_220_p1.read().is_01() || !zext_ln71_2_fu_202_p1.read().is_01())? sc_lv<9>(): (sc_biguint<9>(zext_ln75_fu_220_p1.read()) - sc_biguint<9>(zext_ln71_2_fu_202_p1.read()));
}

void conv1_1::thread_tmp_1_fu_212_p3() {
    tmp_1_fu_212_p3 = esl_concat<3,5>(nb_filtre_0_reg_93.read(), ap_const_lv5_0);
}

void conv1_1::thread_tmp_2_fu_267_p3() {
    tmp_2_fu_267_p3 = esl_concat<10,2>(add_ln75_fu_250_p2.read(), ap_const_lv2_0);
}

void conv1_1::thread_tmp_6_fu_405_p3() {
    tmp_6_fu_405_p3 = esl_concat<5,5>(add_ln71_reg_487.read(), add_ln71_1_fu_399_p2.read());
}

void conv1_1::thread_tmp_fu_190_p3() {
    tmp_fu_190_p3 = esl_concat<3,2>(nb_filtre_0_reg_93.read(), ap_const_lv2_0);
}

void conv1_1::thread_trunc_ln68_fu_346_p1() {
    trunc_ln68_fu_346_p1 = x_assign_reg_139.read().range(31-1, 0);
}

void conv1_1::thread_trunc_ln75_fu_255_p1() {
    trunc_ln75_fu_255_p1 = add_ln75_fu_250_p2.read().range(8-1, 0);
}

void conv1_1::thread_zext_ln68_fu_297_p1() {
    zext_ln68_fu_297_p1 = esl_zext<5,3>(k_0_reg_128.read());
}

void conv1_1::thread_zext_ln69_fu_383_p1() {
    zext_ln69_fu_383_p1 = esl_zext<5,3>(l_0_reg_151.read());
}

void conv1_1::thread_zext_ln71_1_fu_198_p1() {
    zext_ln71_1_fu_198_p1 = esl_zext<6,5>(tmp_fu_190_p3.read());
}

void conv1_1::thread_zext_ln71_2_fu_202_p1() {
    zext_ln71_2_fu_202_p1 = esl_zext<9,5>(tmp_fu_190_p3.read());
}

void conv1_1::thread_zext_ln71_3_fu_412_p1() {
    zext_ln71_3_fu_412_p1 = esl_zext<64,10>(tmp_6_fu_405_p3.read());
}

void conv1_1::thread_zext_ln71_4_fu_319_p1() {
    zext_ln71_4_fu_319_p1 = esl_zext<6,3>(k_0_reg_128.read());
}

void conv1_1::thread_zext_ln71_5_fu_328_p1() {
    zext_ln71_5_fu_328_p1 = esl_zext<8,6>(add_ln71_3_fu_323_p2.read());
}

void conv1_1::thread_zext_ln71_6_fu_417_p1() {
    zext_ln71_6_fu_417_p1 = esl_zext<8,3>(l_0_reg_151.read());
}

void conv1_1::thread_zext_ln71_7_fu_426_p1() {
    zext_ln71_7_fu_426_p1 = esl_zext<64,8>(add_ln71_5_fu_421_p2.read());
}

void conv1_1::thread_zext_ln71_fu_186_p1() {
    zext_ln71_fu_186_p1 = esl_zext<6,3>(nb_filtre_0_reg_93.read());
}

void conv1_1::thread_zext_ln75_1_fu_246_p1() {
    zext_ln75_1_fu_246_p1 = esl_zext<10,5>(i_0_reg_104.read());
}

void conv1_1::thread_zext_ln75_2_fu_369_p1() {
    zext_ln75_2_fu_369_p1 = esl_zext<13,5>(j_0_reg_116.read());
}

void conv1_1::thread_zext_ln75_3_fu_378_p1() {
    zext_ln75_3_fu_378_p1 = esl_zext<64,13>(add_ln75_1_fu_373_p2.read());
}

void conv1_1::thread_zext_ln75_fu_220_p1() {
    zext_ln75_fu_220_p1 = esl_zext<9,8>(tmp_1_fu_212_p3.read());
}

void conv1_1::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && esl_seteq<1,1,1>(ap_start.read(), ap_const_logic_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(icmp_ln64_fu_174_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(icmp_ln65_fu_234_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state4;
            }
            break;
        case 8 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state4.read()) && esl_seteq<1,1,1>(ap_const_lv1_1, icmp_ln66_fu_285_p2.read()))) {
                ap_NS_fsm = ap_ST_fsm_state3;
            } else {
                ap_NS_fsm = ap_ST_fsm_state5;
            }
            break;
        case 16 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state5.read()) && esl_seteq<1,1,1>(icmp_ln68_fu_301_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state6;
            }
            break;
        case 32 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state6.read()) && esl_seteq<1,1,1>(icmp_ln69_fu_387_p2.read(), ap_const_lv1_1))) {
                ap_NS_fsm = ap_ST_fsm_state5;
            } else {
                ap_NS_fsm = ap_ST_fsm_state7;
            }
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXX";
            break;
    }
}

void conv1_1::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_r_address0\" :  \"" << input_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"input_r_ce0\" :  \"" << input_r_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"input_r_q0\" :  \"" << input_r_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_address0\" :  \"" << kernel_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"kernel_ce0\" :  \"" << kernel_ce0.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"kernel_q0\" :  \"" << kernel_q0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_address0\" :  \"" << output_r_address0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_ce0\" :  \"" << output_r_ce0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_we0\" :  \"" << output_r_we0.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"output_r_d0\" :  \"" << output_r_d0.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

